MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;************************ Proyecto: Práctica 1.2 LCD **************************************************
                      00002 ; Instituto Tecnológico Campus Chihuahua 2
                      00003 ; Materia: Lenguaje de Interfacez 
                      00004 ; Autores: 
                      00005 ; - Adan Gerardo Trejo Garcia
                      00006 ; - Azul Siret Cordero Gonzalez
                      00007 ; - Alejandro Soto Aguirre
                      00008 ; Fecha: 17/02/25 
                      00009 
                      00010 ;================================ ZONA DE DATOS ========================================================
                            ===========
                      00011 
                      00012     LIST    P=16F84A
                      00013     INCLUDE "P16F84a.INC"
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F84A processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00208         LIST
2007   3FF1           00014     __CONFIG _CP_OFF & _WDT_OFF & _PWRTE_ON & _XT_OSC
                      00015 
                      00016     ORG 0
0000                  00017 INICO 
0000   1683           00018         BSF     STATUS, RP0      ; Banco 1
0001   3010           00019     MOVLW   B'00010000'      ; Configura RA4 como entrada
0002   0085           00020         MOVWF   PORTA
0003   1283           00021     BCF     STATUS, RP0      ; Banco 0
                      00022 
0004   2???           00023         CALL LCD_Inicializa
                      00024 
0005                  00025 INTERRUPTOR
                      00026     ; Verifica el estado del interruptor en RA4
0005   1A85           00027     BTFSC       PORTA, 5        ; Verifica si RA4 estádo
0006   2???           00028     GOTO    INICIALES           ; Salta 
0007   2???           00029     GOTO    PALABRA             ; Salta
                      00030                         
0008                  00031 INICIALES
0008   3001           00032     MOVLW   1
0009   2???           00033     CALL    LCD_PosicionLinea1
000A   3054           00034     MOVLW   'T'
000B   2???           00035     CALL    LCD_Caracter
000C   3053           00036     MOVLW   'S'
000D   2???           00037     CALL    LCD_Caracter
000E   3043           00038     MOVLW   'C'
000F   2???           00039     CALL    LCD_Caracter
0010   2???           00040     CALL    Retardo_2s
0011   2???           00041     CALL    LCD_Borra
0012   2???           00042     CALL    Retardo_1s
0013   2???           00043     GOTO    INTERRUPTOR
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00044         
0014                  00045 PALABRA
0014   3001           00046         MOVLW   1
0015   2???           00047         CALL    LCD_PosicionLinea2
0016   3049           00048     MOVLW   'I'
0017   2???           00049     CALL    LCD_Caracter
0018   304E           00050     MOVLW   'N'
0019   2???           00051     CALL    LCD_Caracter
001A   3054           00052     MOVLW   'T'
001B   2???           00053     CALL    LCD_Caracter
001C   3045           00054     MOVLW   'E'
001D   2???           00055     CALL    LCD_Caracter
001E   3052           00056     MOVLW   'R'
001F   2???           00057     CALL    LCD_Caracter
0020   3046           00058     MOVLW   'F'
0021   2???           00059     CALL    LCD_Caracter
0022   3041           00060         MOVLW   'A'
0023   2???           00061     CALL    LCD_Caracter
0024   305A           00062     MOVLW   'Z'
0025   2???           00063     CALL    LCD_Caracter
0026   2???           00064         CALL    Retardo_2s
0027   2???           00065     CALL    LCD_Borra
0028   2???           00066     CALL    Retardo_1s
0029   2???           00067     GOTO    INTERRUPTOR 
                      00068 
                      00069     INCLUDE  <RETARDOS.INC>
                      00001 ;**************************** Librer a "RETARDOS.INC" *********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. L pez.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Librer a con m ltiples subrutinas de retardos, desde 4 microsegundos hasta 20 segundos. 
                      00010 ; Adem s se pueden implementar otras subrutinas muy f cilmente.
                      00011 ;
                      00012 ; Se han calculado para un sistema microcontrolador con un PIC trabajando con un cristal
                      00013 ; de cuarzo a 4 MHz. Como cada ciclo m quina son 4 ciclos de reloj, resulta que cada
                      00014 ; ciclo m quina tarda 4 x 1/4MHz = 1  s.
                      00015 ;
                      00016 ; En los comentarios, "cm" significa "ciclos m quina".
                      00017 ;
                      00018 ; ZONA DE DATOS *********************************************************************
                      00019 
                      00020         CBLOCK  0x0C
  0000000C            00021         R_ContA                                 ; Contadores para los retardos.
  0000000D            00022         R_ContB 
  0000000E            00023         R_ContC 
                      00024         ENDC
                      00025 ;
                      00026 ; RETARDOS de 4 hasta 10 microsegundos ---------------------------------------------------
                      00027 ;
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00028 ; A continuaci n retardos peque os teniendo en cuenta que para una frecuencia de 4 MHZ,
                      00029 ; la llamada a subrutina "call" tarda 2 ciclos m quina, el retorno de subrutina
                      00030 ; "return" toma otros 2 ciclos m quina y cada instrucci n "nop" tarda 1 ciclo m quina.
                      00031 ;
002A                  00032 Retardo_10micros                                ; La llamada "call" aporta 2 ciclos m quina.
002A   0000           00033         nop                             ; Aporta 1 ciclo m quina.
002B   0000           00034         nop                             ; Aporta 1 ciclo m quina.
002C   0000           00035         nop                             ; Aporta 1 ciclo m quina.
002D   0000           00036         nop                             ; Aporta 1 ciclo m quina.
002E   0000           00037         nop                             ; Aporta 1 ciclo m quina.
002F                  00038 Retardo_5micros                         ; La llamada "call" aporta 2 ciclos m quina.
002F   0000           00039         nop                             ; Aporta 1 ciclo m quina.
0030                  00040 Retardo_4micros                         ; La llamada "call" aporta 2 ciclos m quina.
0030   0008           00041         return                          ; El salto del retorno aporta 2 ciclos m quina.
                      00042 ;
                      00043 ; RETARDOS de 20 hasta 500 microsegundos ------------------------------------------------
                      00044 ;
0031                  00045 Retardo_500micros                               ; La llamada "call" aporta 2 ciclos m quina.
0031   0000           00046         nop                             ; Aporta 1 ciclo m quina.
0032   30A4           00047         movlw   d'164'                  ; Aporta 1 ciclo m quina. Este es el valor de "K".
0033   2???           00048         goto    RetardoMicros           ; Aporta 2 ciclos m quina.
0034                  00049 Retardo_200micros                               ; La llamada "call" aporta 2 ciclos m quina.
0034   0000           00050         nop                             ; Aporta 1 ciclo m quina.
0035   3040           00051         movlw   d'64'                   ; Aporta 1 ciclo m quina. Este es el valor de "K".
0036   2???           00052         goto    RetardoMicros           ; Aporta 2 ciclos m quina.
0037                  00053 Retardo_100micros                               ; La llamada "call" aporta 2 ciclos m quina.
0037   301F           00054         movlw   d'31'                   ; Aporta 1 ciclo m quina. Este es el valor de "K".
0038   2???           00055         goto    RetardoMicros           ; Aporta 2 ciclos m quina.
0039                  00056 Retardo_50micros                                ; La llamada "call" aporta 2 ciclos m quina.
0039   0000           00057         nop                             ; Aporta 1 ciclo m quina.
003A   300E           00058         movlw   d'14'                   ; Aporta 1 ciclo m quina. Este es el valor de "K".
003B   2???           00059         goto    RetardoMicros           ; Aporta 2 ciclos m quina.
003C                  00060 Retardo_20micros                                ; La llamada "call" aporta 2 ciclos m quina.
003C   3005           00061         movlw   d'5'                    ; Aporta 1 ciclo m quina. Este es el valor de "K".
                      00062 ;
                      00063 ; El pr ximo bloque "RetardoMicros" tarda:
                      00064 ; 1 + (K-1) + 2 + (K-1)x2 + 2 = (2 + 3K) ciclos m quina.
                      00065 ;
003D                  00066 RetardoMicros
003D   008C           00067         movwf   R_ContA                 ; Aporta 1 ciclo m quina.
003E                  00068 Rmicros_Bucle
003E   0B8C           00069         decfsz  R_ContA,F               ; (K-1)x1 cm (cuando no salta) + 2 cm (al saltar).
003F   2???           00070         goto    Rmicros_Bucle           ; Aporta (K-1)x2 ciclos m quina.
0040   0008           00071         return                          ; El salto del retorno aporta 2 ciclos m quina.
                      00072 ;
                      00073 ;En total estas subrutinas tardan:
                      00074 ; - Retardo_500micros:  2 + 1 + 1 + 2 + (2 + 3K) = 500 cm = 500  s. (para K=164 y 4 MHz).
                      00075 ; - Retardo_200micros:  2 + 1 + 1 + 2 + (2 + 3K) = 200 cm = 200  s. (para K= 64 y 4 MHz).
                      00076 ; - Retardo_100micros:  2     + 1 + 2 + (2 + 3K) = 100 cm = 100  s. (para K= 31 y 4 MHz).
                      00077 ; - Retardo_50micros :  2 + 1 + 1 + 2 + (2 + 3K) =  50 cm =  50  s. (para K= 14 y 4 MHz).
                      00078 ; - Retardo_20micros :  2     + 1     + (2 + 3K) =  20 cm =  20  s. (para K=  5 y 4 MHz).
                      00079 ;
                      00080 ; RETARDOS de 1 ms hasta 200 ms. --------------------------------------------------------
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00081 ;
0041                  00082 Retardo_200ms                           ; La llamada "call" aporta 2 ciclos m quina.
0041   30C8           00083         movlw   d'200'                  ; Aporta 1 ciclo m quina. Este es el valor de "M".
0042   2???           00084         goto    Retardos_ms             ; Aporta 2 ciclos m quina.
0043                  00085 Retardo_100ms                           ; La llamada "call" aporta 2 ciclos m quina.
0043   3064           00086         movlw   d'100'                  ; Aporta 1 ciclo m quina. Este es el valor de "M".
0044   2???           00087         goto    Retardos_ms             ; Aporta 2 ciclos m quina.
0045                  00088 Retardo_50ms                            ; La llamada "call" aporta 2 ciclos m quina.
0045   3032           00089         movlw   d'50'                   ; Aporta 1 ciclo m quina. Este es el valor de "M".
0046   2???           00090         goto    Retardos_ms             ; Aporta 2 ciclos m quina.
0047                  00091 Retardo_20ms                            ; La llamada "call" aporta 2 ciclos m quina.
0047   3014           00092         movlw   d'20'                   ; Aporta 1 ciclo m quina. Este es el valor de "M".
0048   2???           00093         goto    Retardos_ms             ; Aporta 2 ciclos m quina.
0049                  00094 Retardo_10ms                            ; La llamada "call" aporta 2 ciclos m quina.
0049   300A           00095         movlw   d'10'                   ; Aporta 1 ciclo m quina. Este es el valor de "M".
004A   2???           00096         goto    Retardos_ms             ; Aporta 2 ciclos m quina.
004B                  00097 Retardo_5ms                             ; La llamada "call" aporta 2 ciclos m quina.
004B   3005           00098         movlw   d'5'                    ; Aporta 1 ciclo m quina. Este es el valor de "M".
004C   2???           00099         goto    Retardos_ms             ; Aporta 2 ciclos m quina.
004D                  00100 Retardo_2ms                             ; La llamada "call" aporta 2 ciclos m quina.
004D   3002           00101         movlw   d'2'                    ; Aporta 1 ciclo m quina. Este es el valor de "M".
004E   2???           00102         goto    Retardos_ms             ; Aporta 2 ciclos m quina.
004F                  00103 Retardo_1ms                             ; La llamada "call" aporta 2 ciclos m quina.
004F   3001           00104         movlw   d'1'                    ; Aporta 1 ciclo m quina. Este es el valor de "M".
                      00105 ;
                      00106 ; El pr ximo bloque "Retardos_ms" tarda:
                      00107 ; 1 + M + M + KxM + (K-1)xM + Mx2 + (K-1)Mx2 + (M-1) + 2 + (M-1)x2 + 2 =
                      00108 ; = (2 + 4M + 4KM) ciclos m quina. Para K=249 y M=1 supone 1002 ciclos m quina
                      00109 ; que a 4 MHz son 1002  s = 1 ms.
                      00110 ;
0050                  00111 Retardos_ms
0050   008D           00112         movwf   R_ContB                 ; Aporta 1 ciclo m quina.
0051                  00113 R1ms_BucleExterno
0051   30F9           00114         movlw   d'249'                  ; Aporta Mx1 ciclos m quina. Este es el valor de "K".
0052   008C           00115         movwf   R_ContA                 ; Aporta Mx1 ciclos m quina.
0053                  00116 R1ms_BucleInterno
0053   0000           00117         nop                             ; Aporta KxMx1 ciclos m quina.
0054   0B8C           00118         decfsz  R_ContA,F               ; (K-1)xMx1 cm (cuando no salta) + Mx2 cm (al saltar).
0055   2???           00119         goto    R1ms_BucleInterno               ; Aporta (K-1)xMx2 ciclos m quina.
0056   0B8D           00120         decfsz  R_ContB,F               ; (M-1)x1 cm (cuando no salta) + 2 cm (al saltar).
0057   2???           00121         goto    R1ms_BucleExterno       ; Aporta (M-1)x2 ciclos m quina.
0058   0008           00122         return                          ; El salto del retorno aporta 2 ciclos m quina.
                      00123 ;
                      00124 ;En total estas subrutinas tardan:
                      00125 ; - Retardo_200ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 200007 cm = 200 ms. (M=200 y K=249).
                      00126 ; - Retardo_100ms:      2 + 1 + 2 + (2 + 4M + 4KM) = 100007 cm = 100 ms. (M=100 y K=249).
                      00127 ; - Retardo_50ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  50007 cm =  50 ms. (M= 50 y K=249).
                      00128 ; - Retardo_20ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  20007 cm =  20 ms. (M= 20 y K=249).
                      00129 ; - Retardo_10ms :      2 + 1 + 2 + (2 + 4M + 4KM) =  10007 cm =  10 ms. (M= 10 y K=249).
                      00130 ; - Retardo_5ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   5007 cm =   5 ms. (M=  5 y K=249).
                      00131 ; - Retardo_2ms  :      2 + 1 + 2 + (2 + 4M + 4KM) =   2007 cm =   2 ms. (M=  2 y K=249).
                      00132 ; - Retardo_1ms  :      2 + 1     + (2 + 4M + 4KM) =   1005 cm =   1 ms. (M=  1 y K=249).
                      00133 ;
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00134 ; RETARDOS de 0.5 hasta 20 segundos ---------------------------------------------------
                      00135 ;
0059                  00136 Retardo_20s                             ; La llamada "call" aporta 2 ciclos m quina.
0059   30C8           00137         movlw   d'200'                  ; Aporta 1 ciclo m quina. Este es el valor de "N".
005A   2???           00138         goto    Retardo_1Decima         ; Aporta 2 ciclos m quina.
005B                  00139 Retardo_10s                             ; La llamada "call" aporta 2 ciclos m quina.
005B   3064           00140         movlw   d'100'                  ; Aporta 1 ciclo m quina. Este es el valor de "N".
005C   2???           00141         goto    Retardo_1Decima         ; Aporta 2 ciclos m quina.
005D                  00142 Retardo_5s                              ; La llamada "call" aporta 2 ciclos m quina.
005D   3032           00143         movlw   d'50'                   ; Aporta 1 ciclo m quina. Este es el valor de "N".
005E   2???           00144         goto    Retardo_1Decima         ; Aporta 2 ciclos m quina.
005F                  00145 Retardo_2s                              ; La llamada "call" aporta 2 ciclos m quina.
005F   3014           00146         movlw   d'20'                   ; Aporta 1 ciclo m quina. Este es el valor de "N".
0060   2???           00147         goto    Retardo_1Decima         ; Aporta 2 ciclos m quina.
0061                  00148 Retardo_1s                              ; La llamada "call" aporta 2 ciclos m quina.
0061   300A           00149         movlw   d'10'                   ; Aporta 1 ciclo m quina. Este es el valor de "N".
0062   2???           00150         goto    Retardo_1Decima         ; Aporta 2 ciclos m quina.
0063                  00151 Retardo_500ms                           ; La llamada "call" aporta 2 ciclos m quina.
0063   3005           00152         movlw   d'5'                    ; Aporta 1 ciclo m quina. Este es el valor de "N".
                      00153 ;
                      00154 ; El pr ximo bloque "Retardo_1Decima" tarda:
                      00155 ; 1 + N + N + MxN + MxN + KxMxN + (K-1)xMxN + MxNx2 + (K-1)xMxNx2 +
                      00156 ;   + (M-1)xN + Nx2 + (M-1)xNx2 + (N-1) + 2 + (N-1)x2 + 2 =
                      00157 ; = (2 + 4M + 4MN + 4KM) ciclos m quina. Para K=249, M=100 y N=1 supone 100011
                      00158 ; ciclos m quina que a 4 MHz son 100011  s = 100 ms = 0,1 s = 1 d cima de segundo.
                      00159 ;
0064                  00160 Retardo_1Decima
0064   008E           00161         movwf   R_ContC                 ; Aporta 1 ciclo m quina.
0065                  00162 R1Decima_BucleExterno2
0065   3064           00163         movlw   d'100'                  ; Aporta Nx1 ciclos m quina. Este es el valor de "M".
0066   008D           00164         movwf   R_ContB                 ; Aporta Nx1 ciclos m quina.
0067                  00165 R1Decima_BucleExterno
0067   30F9           00166         movlw   d'249'                  ; Aporta MxNx1 ciclos m quina. Este es el valor de "K".
0068   008C           00167         movwf   R_ContA                 ; Aporta MxNx1 ciclos m quina.
0069                  00168 R1Decima_BucleInterno          
0069   0000           00169         nop                             ; Aporta KxMxNx1 ciclos m quina.
006A   0B8C           00170         decfsz  R_ContA,F               ; (K-1)xMxNx1 cm (si no salta) + MxNx2 cm (al saltar).
006B   2???           00171         goto    R1Decima_BucleInterno   ; Aporta (K-1)xMxNx2 ciclos m quina.
006C   0B8D           00172         decfsz  R_ContB,F               ; (M-1)xNx1 cm (cuando no salta) + Nx2 cm (al saltar).
006D   2???           00173         goto    R1Decima_BucleExterno   ; Aporta (M-1)xNx2 ciclos m quina.
006E   0B8E           00174         decfsz  R_ContC,F               ; (N-1)x1 cm (cuando no salta) + 2 cm (al saltar).
006F   2???           00175         goto    R1Decima_BucleExterno2  ; Aporta (N-1)x2 ciclos m quina.
0070   0008           00176         return                          ; El salto del retorno aporta 2 ciclos m quina.
                      00177 ;
                      00178 ;En total estas subrutinas tardan:
                      00179 ; - Retardo_20s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 20000807 cm = 20 s.
                      00180 ;                       (N=200, M=100 y K=249).
                      00181 ; - Retardo_10s:        2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) = 10000407 cm = 10 s.
                      00182 ;                       (N=100, M=100 y K=249).
                      00183 ; - Retardo_5s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  5000207 cm =  5 s.
                      00184 ;                       (N= 50, M=100 y K=249).
                      00185 ; - Retardo_2s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  2000087 cm =  2 s.
                      00186 ;                       (N= 20, M=100 y K=249).
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00187 ; - Retardo_1s:         2 + 1 + 2 + (2 + 4N + 4MN + 4KMN) =  1000047 cm =  1 s.
                      00188 ;                       (N= 10, M=100 y K=249).
                      00189 ; - Retardo_500ms:      2 + 1     + (2 + 4N + 4MN + 4KMN) =   500025 cm = 0,5 s.
                      00190 ;                       (N=  5, M=100 y K=249).
                      00191 
                      00192 ;       ===================================================================
                      00193 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00194 ;         E. Palacios, F. Remiro y L. L pez.
                      00195 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00196 ;       =====================================================
                      00070     INCLUDE  <LCD_4BIT.INC>
                      00001 ;**************************** Librería "LCD_4BIT.INC" ***********************************
                      00002 ;
                      00003 ;       ===================================================================
                      00004 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00005 ;         E. Palacios, F. Remiro y L. López.
                      00006 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00007 ;       ===================================================================
                      00008 ;
                      00009 ; Estas subrutinas permiten realizar las tareas básicas de control de un módulo LCD de 2
                      00010 ; líneas por 16 caracteres, compatible con el modelo LM016L.
                      00011 ;
                      00012 ; El visualizador LCD está conectado al Puerto B del PIC mediante un bus de 4 bits. Las
                      00013 ; conexiones son:
                      00014 ;    -  Las 4 líneas superiores del módulo LCD, pines <DB7:DB4>  se conectan a las 4
                      00015 ;       líneas superiores del Puerto B del PIC, pines <RB7:RB4>.
                      00016 ;    -  Pin RS del LCD a la línea RA0 del PIC.
                      00017 ;    -  Pin R/W del LCD a la línea RA1 del PIC, o a masa.
                      00018 ;    -  Pin Enable del LCD a la línea RA2 del PIC.
                      00019 ;
                      00020 ; Se utilizan llamadas a subrutinas de retardo de tiempo localizadas en la librería RETARDOS.INC.
                      00021 ;
                      00022 ; ZONA DE DATOS *********************************************************************
                      00023 
                      00024         CBLOCK
  0000000F            00025         LCD_Dato
  00000010            00026         LCD_GuardaDato
  00000011            00027         LCD_GuardaTRISB
  00000012            00028         LCD_Auxiliar1
  00000013            00029         LCD_Auxiliar2
                      00030         ENDC
                      00031 
  00000010            00032 LCD_CaracteresPorLinea  EQU     .16     ; Número de caracteres por línea de la pantalla.
                      00033 
                      00034 #DEFINE  LCD_PinRS      PORTA,0
                      00035 #DEFINE  LCD_PinRW      PORTA,1
                      00036 #DEFINE  LCD_PinEnable  PORTA,2
                      00037 #DEFINE  LCD_BusDatos   PORTB
                      00038 
                      00039 ; Subrutina "LCD_Inicializa" ------------------------------------------------------------
                      00040 ;
                      00041 ; Inicialización del módulo LCD: Configura funciones del LCD, produce reset por software,
                      00042 ; borra memoria y enciende pantalla. El fabricante especifica que para garantizar la
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00043 ; configuración inicial hay que hacerla como sigue:
                      00044 ;
0071                  00045 LCD_Inicializa
0071   1683           00046         bsf     STATUS,RP0              ; Configura las líneas conectadas al pines RS,
0072   1005           00047         bcf     LCD_PinRS               ; R/W y E.
0073   1105           00048         bcf     LCD_PinEnable
0074   1085           00049         bcf     LCD_PinRW
0075   1283           00050         bcf     STATUS,RP0
0076   1085           00051         bcf     LCD_PinRW               ; En caso de que esté conectado le indica
                      00052                                         ; que se va a escribir en el LCD.
0077   1105           00053         bcf     LCD_PinEnable           ; Impide funcionamiento del LCD poniendo E=0.
0078   1005           00054         bcf     LCD_PinRS               ; Activa el Modo Comando poniendo RS=0.
0079   2???           00055         call    Retardo_20ms
007A   3030           00056         movlw   b'00110000'     
007B   2???           00057         call    LCD_EscribeLCD          ; Escribe el dato en el LCD.
007C   2???           00058         call    Retardo_5ms     
007D   3030           00059         movlw   b'00110000'     
007E   2???           00060         call    LCD_EscribeLCD
007F   2???           00061         call    Retardo_200micros
0080   3030           00062         movlw   b'00110000'     
0081   2???           00063         call    LCD_EscribeLCD
0082   3020           00064         movlw   b'00100000'             ; Interface de 4 bits.
0083   2???           00065         call    LCD_EscribeLCD
                      00066 
                      00067 ; Ahora configura el resto de los parámetros: 
                      00068 
0084   2???           00069         call    LCD_2Lineas4Bits5x7     ; LCD de 2 líneas y caracteres de 5x7 puntos.
0085   2???           00070         call    LCD_Borra               ; Pantalla encendida y limpia. Cursor al principio
0086   2???           00071         call    LCD_CursorOFF           ; de la línea 1. Cursor apagado.
0087   2???           00072         call    LCD_CursorIncr          ; Cursor en modo incrementar.
0088   0008           00073         return
                      00074 
                      00075 ; Subrutina "LCD_EscribeLCD" -----------------------------------------------------------
                      00076 ;
                      00077 ; Envía el dato del registro de trabajo W al bus de dato y produce un pequeño pulso en el pin
                      00078 ; Enable del LCD. Para no alterar el contenido de las líneas de la parte baja del Puerto B que
                      00079 ; no son utilizadas para el LCD (pines RB3:RB0), primero se lee estas líneas y después se
                      00080 ; vuelve a enviar este dato sin cambiarlo.
                      00081 
0089                  00082 LCD_EscribeLCD
0089   39F0           00083         andlw   b'11110000'             ; Se queda con el nibble alto del dato que es el
008A   008F           00084         movwf   LCD_Dato                ; que hay que enviar y lo guarda.
008B   0806           00085         movf    LCD_BusDatos,W          ; Lee la información actual de la parte baja
008C   390F           00086         andlw   b'00001111'             ; del Puerto B, que no se debe alterar.
008D   048F           00087         iorwf   LCD_Dato,F              ; Enviará la parte alta del dato de entrada
                      00088                                         ; y en la parte baja lo que había antes.
008E   1683           00089         bsf     STATUS,RP0              ; Acceso al Banco 1.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
008F   0806           00090         movf    TRISB,W         ; Guarda la configuración que tenía antes TRISB.
0090   0091           00091         movwf   LCD_GuardaTRISB
0091   300F           00092         movlw   b'00001111'             ; Las 4 líneas inferiores del Puerto B se dejan 
0092   0586           00093         andwf   PORTB,F                 ; como estaban y las 4 superiores como salida.
0093   1283           00094         bcf     STATUS,RP0              ; Acceso al Banco 0.
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00095 ;
0094   080F           00096         movf    LCD_Dato,W              ; Recupera el dato a enviar.
0095   0086           00097         movwf   LCD_BusDatos            ; Envía el dato al módulo LCD.
0096   1505           00098         bsf     LCD_PinEnable           ; Permite funcionamiento del LCD mediante un pequeño
0097   1105           00099         bcf     LCD_PinEnable           ; pulso y termina impidiendo el funcionamiento del LCD.
0098   1683           00100         bsf     STATUS,RP0              ; Acceso al Banco 1. Restaura el antiguo valor en
0099   0811           00101         movf    LCD_GuardaTRISB,W       ; la configuración del Puerto B.
009A   0086           00102         movwf   PORTB                   ; Realmente es TRISB.
009B   1283           00103         bcf     STATUS,RP0              ; Acceso al Banco 0.
009C   0008           00104         return
                      00105 
                      00106 ; Subrutinas variadas para el control del módulo LCD -----------------------------------------
                      00107 ;
                      00108 ;Los comandos que pueden ser ejecutados son:
                      00109 ;
009D                  00110 LCD_CursorIncr                          ; Cursor en modo incrementar.
009D   3006           00111         movlw   b'00000110'
009E   2???           00112         goto    LCD_EnviaComando
009F                  00113 LCD_Linea1                              ; Cursor al principio de la Línea 1.
009F   3080           00114         movlw   b'10000000'             ; Dirección 00h de la DDRAM
00A0   2???           00115         goto    LCD_EnviaComando
00A1                  00116 LCD_Linea2                              ; Cursor al principio de la Línea 2.
00A1   30C0           00117         movlw   b'11000000'             ; Dirección 40h de la DDRAM
00A2   2???           00118         goto    LCD_EnviaComando
00A3                  00119 LCD_PosicionLinea1                      ; Cursor a posición de la Línea 1, a partir de la
00A3   3880           00120         iorlw   b'10000000'             ; dirección 00h de la DDRAM más el valor del
00A4   2???           00121         goto    LCD_EnviaComando        ; registro W.
00A5                  00122 LCD_PosicionLinea2                      ; Cursor a posición de la Línea 2, a partir de la
00A5   38C0           00123         iorlw   b'11000000'             ; dirección 40h de la DDRAM más el valor del
00A6   2???           00124         goto    LCD_EnviaComando        ; registro W.
00A7                  00125 LCD_OFF                         ; Pantalla apagada.
00A7   3008           00126         movlw   b'00001000'
00A8   2???           00127         goto    LCD_EnviaComando
00A9                  00128 LCD_CursorON                            ; Pantalla encendida y cursor encendido.
00A9   300E           00129         movlw   b'00001110'
00AA   2???           00130         goto    LCD_EnviaComando
00AB                  00131 LCD_CursorOFF                           ; Pantalla encendida y cursor apagado.
00AB   300C           00132         movlw   b'00001100'
00AC   2???           00133         goto    LCD_EnviaComando
00AD                  00134 LCD_Borra                               ; Borra toda la pantalla, memoria DDRAM y pone el 
00AD   3001           00135         movlw   b'00000001'             ; cursor a principio de la línea 1.
00AE   2???           00136         goto    LCD_EnviaComando
00AF                  00137 LCD_2Lineas4Bits5x7                     ; Define la pantalla de 2 líneas, con caracteres
00AF   3028           00138         movlw   b'00101000'             ; de 5x7 puntos y conexión al PIC mediante bus de
                      00139 ;       goto    LCD_EnviaComando        ; 4 bits. 
                      00140 
                      00141 ; Subrutinas "LCD_EnviaComando" y "LCD_Caracter" ------------------------------------
                      00142 ;
                      00143 ; "LCD_EnviaComando". Escribe un comando en el registro del módulo LCD. La palabra de
                      00144 ; comando ha sido entregada a través del registro W.  Trabaja en Modo Comando.
                      00145 ; "LCD_Caracter". Escribe en la memoria DDRAM del LCD el carácter ASCII introducido a
                      00146 ; a través del registro W. Trabaja en Modo Dato.
                      00147 ;
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B0                  00148 LCD_EnviaComando
00B0   1005           00149         bcf     LCD_PinRS               ; Activa el Modo Comando, poniendo RS=0.
00B1   2???           00150         goto    LCD_Envia
00B2                  00151 LCD_Caracter
00B2   1405           00152         bsf     LCD_PinRS               ; Activa el "Modo Dato", poniendo RS=1.
00B3   2???           00153         call    LCD_CodigoCGROM ; Obtiene el código para correcta visualización.
00B4                  00154 LCD_Envia
00B4   0090           00155         movwf   LCD_GuardaDato          ; Guarda el dato a enviar.
00B5   2???           00156         call    LCD_EscribeLCD          ; Primero envía el nibble alto.
00B6   0E10           00157         swapf   LCD_GuardaDato,W        ; Ahora envía el nibble bajo. Para ello pasa el
                      00158                                         ; nibble bajo del dato a enviar a parte alta del byte.
00B7   2???           00159         call    LCD_EscribeLCD          ; Se envía al visualizador LCD.
00B8   1C05           00160         btfss   LCD_PinRS               ; Debe garantizar una correcta escritura manteniendo 
00B9   2???           00161         call    Retardo_2ms             ; 2 ms en modo comando y 50 µs en modo cáracter.
00BA   2???           00162         call    Retardo_50micros
00BB   0008           00163         return  
                      00164 
                      00165 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00166 ;
                      00167 ; A partir del carácter ASCII número 127 los códigos de los caracteres definidos en la
                      00168 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00169 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00170 ;
                      00171 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00172 ; que puedan ser visualizado en el módulo LM016L.
                      00173 ; 
                      00174 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00175 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00176 
00BC                  00177 LCD_CodigoCGROM
00BC   008F           00178         movwf   LCD_Dato                ; Guarda el valor del carácter y comprueba si es
00BD                  00179 LCD_EnheMinuscula                       ; un carácter especial.
00BD   3CF1           00180         sublw   'ñ'                     ; ¿Es la "ñ"?
00BE   1D03           00181         btfss   STATUS,Z
00BF   2???           00182         goto    LCD_EnheMayuscula       ; No es "ñ".
00C0   30EE           00183         movlw   b'11101110'             ; Código CGROM de la "ñ".
00C1   008F           00184         movwf   LCD_Dato
00C2   2???           00185         goto    LCD_FinCGROM
00C3                  00186 LCD_EnheMayuscula
00C3   080F           00187         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00C4   3CD1           00188         sublw   'Ñ'                     ; ¿Es la "Ñ"?
00C5   1D03           00189         btfss   STATUS,Z
00C6   2???           00190         goto    LCD_Grado               ; No es "Ñ".
00C7   30EE           00191         movlw   b'11101110'             ; Código CGROM de la "ñ". (No hay símbolo para
00C8   008F           00192         movwf   LCD_Dato                ; la "Ñ" mayúscula en la CGROM).
00C9   2???           00193         goto    LCD_FinCGROM    
00CA                  00194 LCD_Grado
00CA   080F           00195         movf    LCD_Dato,W              ; Recupera el código ASCII de entrada.
00CB   3CBA           00196         sublw   'º'                     ; ¿Es el símbolo "º"?
00CC   1D03           00197         btfss   STATUS,Z
00CD   2???           00198         goto    LCD_FinCGROM            ; No es "º".
00CE   30DF           00199         movlw   b'11011111'             ; Código CGROM del símbolo "º".
00CF   008F           00200         movwf   LCD_Dato
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D0                  00201 LCD_FinCGROM
00D0   080F           00202         movf    LCD_Dato,W              ; En (W) el código buscado.
00D1   0008           00203         return
                      00204 
                      00205 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00206 ;
                      00207 ; Visualiza espacios en blanco.
                      00208 
00D2                  00209 LCD_LineaEnBlanco
00D2   3010           00210         movlw   LCD_CaracteresPorLinea
00D3   2???           00211         goto    LCD_EnviaBlancos
00D4                  00212 LCD_UnEspacioBlanco
00D4   3001           00213         movlw   .1
00D5   2???           00214         goto    LCD_EnviaBlancos
00D6                  00215 LCD_DosEspaciosBlancos
00D6   3002           00216         movlw   .2
00D7   2???           00217         goto    LCD_EnviaBlancos
00D8                  00218 LCD_TresEspaciosBlancos
00D8   3003           00219         movlw   .3
00D9                  00220 LCD_EnviaBlancos
00D9   0092           00221         movwf   LCD_Auxiliar1           ; (LCD_Auxiliar1) se utiliza como contador.
00DA                  00222 LCD_EnviaOtroBlanco     
00DA   3020           00223         movlw   ' '                     ; Esto es un espacio en blanco.
00DB   2???           00224         call    LCD_Caracter            ; Visualiza tanto espacios en blanco como se
00DC   0B92           00225         decfsz  LCD_Auxiliar1,F         ; haya cargado en (LCD_Auxiliar1).
00DD   2???           00226         goto    LCD_EnviaOtroBlanco
00DE   0008           00227         return
                      00228 
                      00229 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00230 ;
                      00231 ; Subrutina "LCD_ByteCompleto", visualiza el byte que almacena el registro W en el
                      00232 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00233 ;
                      00234 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero 
                      00235 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00236 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00237 ;
                      00238 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00239 ;
00DF                  00240 LCD_Byte
00DF   0093           00241         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00E0   39F0           00242         andlw   b'11110000'             ; Analiza si el nibble alto es cero.
00E1   1D03           00243         btfss   STATUS,Z                ; Si es cero lo apaga.
00E2   2???           00244         goto    LCD_VisualizaAlto               ; No es cero y lo visualiza.
00E3   3020           00245         movlw   ' '                     ; Visualiza un espacio en blanco.
00E4   2???           00246         call    LCD_Caracter
00E5   2???           00247         goto    LCD_VisualizaBajo
                      00248 
00E6                  00249 LCD_ByteCompleto
00E6   0093           00250         movwf   LCD_Auxiliar2           ; Guarda el valor de entrada.
00E7                  00251 LCD_VisualizaAlto
00E7   0E13           00252         swapf   LCD_Auxiliar2,W         ; Pone el nibble alto en la parte baja.
00E8   2???           00253         call    LCD_Nibble              ; Lo visualiza.
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E9                  00254 LCD_VisualizaBajo
00E9   0813           00255         movf    LCD_Auxiliar2,W         ; Repite el proceso con el nibble bajo.
                      00256 ;       call    LCD_Nibble              ; Lo visualiza.
                      00257 ;       return
                      00258 
                      00259 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00260 ;
                      00261 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00262 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00263 ; - Si (W)=b'01010110', se visualizará "6". 
                      00264 ; - Si (W)=b'10101110', se visualizará "E". 
                      00265 ;
00EA                  00266 LCD_Nibble
00EA   390F           00267         andlw   b'00001111'             ; Se queda con la parte baja.
00EB   0092           00268         movwf   LCD_Auxiliar1           ; Lo guarda.
00EC   3C09           00269         sublw   0x09                    ; Comprueba si hay que representarlo con letra.
00ED   1C03           00270         btfss   STATUS,C        
00EE   2???           00271         goto    LCD_EnviaByteLetra
00EF   0812           00272         movf    LCD_Auxiliar1,W
00F0   3E30           00273         addlw   '0'                     ; El número se pasa a carácter ASCII sumándole
00F1   2???           00274         goto    LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
00F2                  00275 LCD_EnviaByteLetra
00F2   0812           00276         movf    LCD_Auxiliar1,W
00F3   3E37           00277         addlw   'A'-0x0A                        ; Sí, por tanto, se le suma el ASCII de la 'A'.
00F4                  00278 LCD_FinVisualizaDigito
00F4   2???           00279         goto    LCD_Caracter            ; Y visualiza el carácter. Se hace con un "goto"
                      00280                                         ; para no sobrecargar la pila.
                      00281                                         
                      00282 ;       ===================================================================
                      00283 ;         Del libro "MICROCONTROLADOR PIC16F84. DESARROLLO DE PROYECTOS"
                      00284 ;         E. Palacios, F. Remiro y L. López.
                      00285 ;         Editorial Ra-Ma.  www.ra-ma.es
                      00286 ;       ===================================================================
3FF1                  00071     END
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE 12


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
GIE                               00000007
INDF                              00000000
INICIALES                         00000008
INICO                             00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTERRUPTOR                       00000005
INTF                              00000001
IRP                               00000007
LCD_2Lineas4Bits5x7               000000AF
LCD_Auxiliar1                     00000012
LCD_Auxiliar2                     00000013
LCD_Borra                         000000AD
LCD_BusDatos                      PORTB
LCD_Byte                          000000DF
LCD_ByteCompleto                  000000E6
LCD_Caracter                      000000B2
LCD_CaracteresPorLinea            00000010
LCD_CodigoCGROM                   000000BC
LCD_CursorIncr                    0000009D
LCD_CursorOFF                     000000AB
LCD_CursorON                      000000A9
LCD_Dato                          0000000F
LCD_DosEspaciosBlancos            000000D6
LCD_EnheMayuscula                 000000C3
LCD_EnheMinuscula                 000000BD
LCD_Envia                         000000B4
LCD_EnviaBlancos                  000000D9
LCD_EnviaByteLetra                000000F2
LCD_EnviaComando                  000000B0
LCD_EnviaOtroBlanco               000000DA
LCD_EscribeLCD                    00000089
LCD_FinCGROM                      000000D0
LCD_FinVisualizaDigito            000000F4
LCD_Grado                         000000CA
LCD_GuardaDato                    00000010
LCD_GuardaTRISB                   00000011
LCD_Inicializa                    00000071
LCD_Linea1                        0000009F
LCD_Linea2                        000000A1
LCD_LineaEnBlanco                 000000D2
LCD_Nibble                        000000EA
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

LCD_OFF                           000000A7
LCD_PinEnable                     PORTA,2
LCD_PinRS                         PORTA,0
LCD_PinRW                         PORTA,1
LCD_PosicionLinea1                000000A3
LCD_PosicionLinea2                000000A5
LCD_TresEspaciosBlancos           000000D8
LCD_UnEspacioBlanco               000000D4
LCD_VisualizaAlto                 000000E7
LCD_VisualizaBajo                 000000E9
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PALABRA                           00000014
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
R1Decima_BucleExterno             00000067
R1Decima_BucleExterno2            00000065
R1Decima_BucleInterno             00000069
R1ms_BucleExterno                 00000051
R1ms_BucleInterno                 00000053
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
R_ContA                           0000000C
R_ContB                           0000000D
R_ContC                           0000000E
RetardoMicros                     0000003D
Retardo_100micros                 00000037
Retardo_100ms                     00000043
Retardo_10micros                  0000002A
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

Retardo_10ms                      00000049
Retardo_10s                       0000005B
Retardo_1Decima                   00000064
Retardo_1ms                       0000004F
Retardo_1s                        00000061
Retardo_200micros                 00000034
Retardo_200ms                     00000041
Retardo_20micros                  0000003C
Retardo_20ms                      00000047
Retardo_20s                       00000059
Retardo_2ms                       0000004D
Retardo_2s                        0000005F
Retardo_4micros                   00000030
Retardo_500micros                 00000031
Retardo_500ms                     00000063
Retardo_50micros                  00000039
Retardo_50ms                      00000045
Retardo_5micros                   0000002F
Retardo_5ms                       0000004B
Retardo_5s                        0000005D
Retardos_ms                       00000050
Rmicros_Bucle                     0000003E
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CONFIG                           00002007
_CP_OFF                           00003FFF
_CP_ON                            0000000F
MPASM  5.51                        LCD_01.ASM   2-19-2025  17:29:53         PAGE 15


SYMBOL TABLE
  LABEL                             VALUE 

_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84A                          00000001
__DEBUG                           1

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

